{"version":3,"sources":["lastnamesplit.ts","datetimeutils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MultiLastNameSplit","splitStr","_classCallCheck","this","otherSplits","_step","splitted2","split","filter","s","trim","map","toUpperCase","replaceAll","_iterator","_createForOfIteratorHelper","n","done","individualSplit","value","newSplit","match","DoubleLastNameSplit","console","log","SingleLastNameSplit","push","err","e","f","_createClass","key","lastName","length","some","item","isInSplit","NoLastNameSplit","startingString","startsWith","start","end","splitString","Error","lastNameUpper","substring","stringToTime","timeString","_i2","_timeFormats","format","momentTime","moment","isValid","now","parsedTime","isBefore","add","toDate","displayFormalDate","dateString","temp","_i","_dateFormats","momentDate","stringToDate","toDateString","displayFormalTime","concat","getHours","getMinutes","toString","padStart","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","o","allowArrayLike","it","Array","isArray","minLen","_arrayLikeToArray","from","test","_unsupportedIterableToArray","F","_e","normalCompletion","didErr","step","_e2","arr","len","arr2","searchExamTimings","eTimes","decision","courseCode","course","section","et","ExamTimingComponent","props","timingInfo","examTiming","React","createElement","date","location","ExamDecisionWrapper","_React$useState","useState","_React$useState2","_slicedToArray","isSmallScreen","setIsSmallScreen","useEffect","handleResize","window","innerWidth","addEventListener","removeEventListener","decisions","decisionList","displayCourses","allData","examTimes","sort","a","b","stringToTime1","stringToTime2","ExamTableFormal","TableContainer","component","Paper","Table","sx","minWidth","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","&:last-child td, &:last-child th","border","scope","removeTrailingSlashes","str","replace","whiteBG","backgroundColor","padding","borderRadius","BasicSelect","_React$useState3","_React$useState4","age","setAge","Box","color","FormControl","fullWidth","InputLabel","id","Select","labelId","label","onChange","event","target","onSessionUpdate","MenuItem","MyTable","_useState9","_useState10","data","setData","handleChange","index","newData","_toConsumableArray","onDataUpdate","style","TextField","variant","paddingLeft","IconButton","fill","onClick","splice","handleRemoveRow","CloseIcon","Button","App","_useState","_useState2","setLastName","_useState3","_useState4","examRequestData","setExamRequestData","_useState5","_useState6","decisionInput","setDecisionInput","_fetchData","_asyncToGenerator","_callee","response","responseJson","_context","process","fetch","json","apply","arguments","document","title","fetchData","_useState7","_useState8","className","ses","_fetchSession","_callee2","session","_context2","_x","fetchSession","autoComplete","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.81d4d5c8.chunk.js","sourcesContent":["export interface LastNameSplit {\r\n    /**\r\n     * Returns true if lastName is in this particular split.\r\n     * @param lastName\r\n     */\r\n    isInSplit(lastName: string): boolean;\r\n}\r\n\r\n/**\r\n * Creates a LastNameSplit objected based on\r\n * a split string that can be found on the\r\n * exam timetable.\r\n * @param splitStr the input split string\r\n */\r\nexport function createSplit(splitStr: string): LastNameSplit {\r\n    let toReturn: LastNameSplit;\r\n    splitStr = splitStr.trim().replaceAll(\" \", \"\").toUpperCase();\r\n    if (splitStr.match(/^[A-Z]+-[A-Z]+$/)) {\r\n        toReturn = new DoubleLastNameSplit(splitStr);\r\n    } else if (splitStr.match(/^[A-Z]+$/)) {\r\n        toReturn = new SingleLastNameSplit(splitStr);\r\n    } else if (splitStr.match(/,/)) {\r\n        toReturn = new MultiLastNameSplit(splitStr);\r\n    } else {\r\n        toReturn = new NoLastNameSplit();\r\n    }\r\n    return toReturn;\r\n}\r\n\r\nclass MultiLastNameSplit implements LastNameSplit {\r\n    otherSplits: LastNameSplit[];\r\n\r\n    constructor(splitStr: string) {\r\n        this.otherSplits = [];\r\n        let splitted2 = splitStr.split(',').filter((s) => s.trim() !== '')\r\n            .map(s => s.toUpperCase().trim().replaceAll(\" \", \"\"));\r\n        for (let individualSplit of splitted2) {\r\n            let newSplit: LastNameSplit;\r\n            if (individualSplit.match(/^[A-Z]+-[A-Z]+$/)) {\r\n                newSplit = new DoubleLastNameSplit(individualSplit);\r\n            } else if (individualSplit.match(/^[A-Z]+$/)) {\r\n                newSplit = new SingleLastNameSplit(individualSplit);\r\n            } else {\r\n                console.log(\"Split item created nothing\", individualSplit, splitted2);\r\n                continue;\r\n            }\r\n            this.otherSplits.push(newSplit);\r\n        }\r\n    }\r\n\r\n    isInSplit(lastName: string): boolean {\r\n        console.log(this);\r\n        if (this.otherSplits.length === 0)\r\n            return false;\r\n        else {\r\n            return this.otherSplits.some((item) => item.isInSplit(lastName));\r\n        }\r\n    }\r\n}\r\n\r\nclass NoLastNameSplit\r\n    implements LastNameSplit {\r\n    isInSplit(lastName: string): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass SingleLastNameSplit implements LastNameSplit {\r\n    private readonly startingString;\r\n\r\n    /**\r\n     * @param splitStr must match the regex ^[A-Z]+\r\n     */\r\n    constructor(splitStr: string) {\r\n        this.startingString = splitStr.split(\"-\")[0].toUpperCase();\r\n    }\r\n\r\n    isInSplit(lastName: string): boolean {\r\n        return lastName.toUpperCase().startsWith(this.startingString);\r\n    }\r\n}\r\n\r\nclass DoubleLastNameSplit implements LastNameSplit {\r\n    private readonly start;\r\n    private readonly end;\r\n\r\n    /**\r\n     * @param splitStr must match the regex ^[A-Z]+\r\n     */\r\n    constructor(splitStr: string) {\r\n        const splitString = splitStr.toUpperCase().split(\"-\");\r\n        if (splitString.length !== 2) {\r\n            throw Error(\"Double last name split isn't actually a double last name split\");\r\n        }\r\n        this.start = splitString[0];\r\n        this.end = splitString[1];\r\n    }\r\n\r\n    isInSplit(lastName: string): boolean {\r\n        const lastNameUpper = lastName.toUpperCase();\r\n        // console.log(`is ${this.start}-${this.end} || `, this.start <= lastNameUpper.substring(this.start.length), lastNameUpper.substring(this.end.length) <= this.end);\r\n        return this.start <= lastNameUpper.substring(0, this.start.length)\r\n            && lastNameUpper.substring(0, this.end.length) <= this.end;\r\n    }\r\n}","import moment from 'moment';\r\n\r\n\r\nfunction stringToDate(dateString: string): Date | null {\r\n    const dateFormats = [\r\n        ['DD-MMM', 'DD/MMM', 'MMM/DD', 'MMM/DD/YYYY'],\r\n        ['YYYY/MM/DD'],\r\n        ['MM/DD/YYYY']\r\n    ];\r\n\r\n    for (const format of dateFormats) {\r\n        const momentDate = moment(dateString, format, true);\r\n        if (momentDate.isValid()) {\r\n            return momentDate.toDate();\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function stringToTime(timeString: string): Date | null {\r\n    timeString = timeString.toUpperCase().trim();\r\n    const timeFormats = [\r\n        'h:mmA',\r\n        'h:mm A',\r\n        'h:mmsA',\r\n        'h:mms A',\r\n        'H:mm'\r\n    ];\r\n\r\n    for (const format of timeFormats) {\r\n        const momentTime = moment(timeString, format, true);\r\n        if (momentTime.isValid()) {\r\n            const now = moment();\r\n            const parsedTime = moment(momentTime.format('H:mm'), 'H:mm');\r\n            if (parsedTime.isBefore(now)) {\r\n                parsedTime.add(1, 'day');\r\n            }\r\n            return parsedTime.toDate();\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function displayFormalDate(dateString: string): string {\r\n    const temp = stringToDate(dateString.trim());\r\n    if(temp === null){\r\n        return dateString;\r\n    } else {\r\n        return temp.toDateString();\r\n    }\r\n}\r\n\r\n\r\nexport function displayFormalTime(timeString: string): string {\r\n    const temp = stringToTime(timeString);\r\n    if(temp === null){\r\n        return timeString;\r\n    }\r\n    else {\r\n        return `${temp.getHours()}:${temp.getMinutes().toString().padStart(2, '0')}`;\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {ExamRequest, ExamTiming} from \"./interfaces\";\nimport {createSplit} from \"./lastnamesplit\";\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, {SelectChangeEvent} from '@mui/material/Select';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport {displayFormalDate, displayFormalTime, stringToTime} from \"./datetimeutils\";\nimport TextField from '@mui/material/TextField';\nimport CloseIcon from '@mui/icons-material/Close';\nimport {Button, IconButton} from '@mui/material';\n\n\ntype Decision = {\n    course: string;\n    section: string;  // blank if all / not stated\n}\n\ntype PropsToExamDecisionWrapper = {\n    decisionList: Decision[];\n    lastName: string;\n    allData: ExamRequest;\n}\n\n\n/**\n * Returns the exam timing object, or null if it doesn't exist.\n * @param eTimes the list of all possible exam timings\n * @param decision contains the course and section code\n * @param lastName the last name of the user\n */\nfunction searchExamTimings(eTimes: ExamTiming[], decision: Decision, lastName: string): ExamTiming | null {\n    const courseCode = decision.course;\n    const section = decision.section;\n    for (let et of eTimes) {\n        if (courseCode !== et.course) continue;\n        // console.log(et.course);\n        if (et.section !== \"ALL\" && section !== et.section) continue;\n        // last name split detector\n        const split = createSplit(et.split);\n        if (split.isInSplit(lastName)) {\n            return et;\n        }\n    }\n    return null;\n}\n\n\ntype SingleTiming = {\n    examTiming: ExamTiming;\n}\n\n\nfunction ExamTimingComponent(props: SingleTiming) {\n    const timingInfo = props.examTiming;\n    return (\n        <div>\n            {timingInfo.course} | {timingInfo.date} | {timingInfo.start}-{timingInfo.end} | {timingInfo.location} | {timingInfo.split.replaceAll(\" \", \"\")}\n        </div>\n    )\n}\n\n\nfunction ExamDecisionWrapper(props: PropsToExamDecisionWrapper) {\n    const [isSmallScreen, setIsSmallScreen] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        const handleResize = () => {\n            setIsSmallScreen(window.innerWidth < 660); // check if the viewport width is less than 768 pixels\n        };\n\n        handleResize(); // check the screen width on mount\n\n        window.addEventListener('resize', handleResize); // listen for window resize events\n\n        return () => {\n            window.removeEventListener('resize', handleResize); // remove event listener on unmount\n        };\n    }, []);\n\n\n\n\n    const decisions = props.decisionList;\n    const displayCourses: ExamTiming[] = [];\n    for (let i = 0; i < decisions.length; i++) {\n        const decision = decisions[i];\n        const result = searchExamTimings(props.allData.examTimes, decision, props.lastName);\n        if (result !== null) {\n            displayCourses.push(result);\n        }\n    }\n    displayCourses.sort((a, b) => {\n        if (a.date === null && b.date !== null) return -1;\n        if (a.date !== null && b.date === null) return 1;\n        if (a.date === null && b.date === null) return 0;\n        if (a.date < b.date) return -1;\n        if (a.date > b.date) return 1;\n        else {\n\n            let stringToTime1 = stringToTime(a.start);\n            let stringToTime2 = stringToTime(b.start);\n            if (stringToTime1 !== null && stringToTime2 !== null)\n                return stringToTime1.getHours() - stringToTime2.getHours();\n            else if (stringToTime1 === null && stringToTime2 !== null) {\n                return -1;\n            } else if (stringToTime1 !== null && stringToTime2 === null) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n\n    });\n    // console.log(\"Display courses\", displayCourses)\n    return (\n        <div>\n            <div>\n                {!isSmallScreen ? (<ExamTableFormal displayCourses={displayCourses}/>) :\n\n                displayCourses.map((et) => <ExamTimingComponent key={`${et.course}-${et.location}`} examTiming={et}/>)}\n            </div>\n        </div>\n    )\n}\n\n\ntype ExamTimingListProp = {\n    displayCourses: ExamTiming[];\n}\n\nfunction ExamTableFormal(props: ExamTimingListProp) {\n    const displayCourses = props.displayCourses;\n    return (\n        <TableContainer component={Paper}>\n            <Table sx={{minWidth: 650}} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Course</TableCell>\n                        <TableCell align=\"right\">Date</TableCell>\n                        <TableCell align=\"right\">Start</TableCell>\n                        <TableCell align=\"right\">End</TableCell>\n                        <TableCell align=\"right\">Location</TableCell>\n                        <TableCell align=\"right\">Split</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {displayCourses.map((row) => (\n                        <TableRow\n                            key={row.course}\n                            sx={{'&:last-child td, &:last-child th': {border: 0}}}\n                        >\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.course}\n                            </TableCell>\n                            <TableCell align=\"right\">{displayFormalDate(row.date)}</TableCell>\n                            <TableCell align=\"right\">{displayFormalTime(row.start)}</TableCell>\n                            <TableCell align=\"right\">{displayFormalTime(row.end)}</TableCell>\n                            <TableCell align=\"right\">{row.location}</TableCell>\n                            <TableCell align=\"right\">{row.split}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\n\nfunction createTableData(et: ExamTiming) {\n    //             {timingInfo.course} | {timingInfo.date} | {timingInfo.start}-{timingInfo.end} | {timingInfo.location} | {timingInfo.split.replaceAll(\" \", \"\")}\n    const course = et.course;\n    const date = et.date;\n    const start = et.start;\n    const end = et.end;\n    const location = et.location;\n    const split = et.split.replaceAll(\" \", \"\");\n    return {course, date, start, end, location, split};\n}\n\n\nfunction removeTrailingSlashes(str: string): string {\n    return str.replace(/\\/+$/, '');\n}\n\nconst whiteBG = {\n    backgroundColor: 'white',\n    padding: '6px',\n    borderRadius: '5px'\n}\n\nfunction App() {\n\n    const [lastName, setLastName] = useState('');\n    const [examRequestData, setExamRequestData] = useState<ExamRequest | null>(null);\n    const [decisionInput, setDecisionInput] = useState<Decision[]>([]);\n\n\n    useEffect(() => {\n        document.title = \"UofT ArtSci Exam Scheduler\";\n\n        async function fetchData() {\n            console.log(\"Fetching from \", `${process.env.PUBLIC_URL}/exams_20231.json`)\n            const response = await fetch(`${removeTrailingSlashes(process.env.PUBLIC_URL)}/exams_20231.json`);\n            const responseJson = await response.json();\n            setExamRequestData(responseJson);\n        }\n\n        fetchData().then(() => console.log(\"Fetched\", examRequestData));\n    }, []);\n\n    const [counter, setCounter] = useState(0);\n    let tempVar = \"Among us\";\n\n    function handleDataUpdate(data: Decision[]) {\n        // console.log('Table data updated:', data);\n        setDecisionInput(data);\n    }\n\n\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue = event.target.value.toUpperCase();\n        setLastName(event.target.value);\n\n\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n\n                <h1>UofT ArtSci Exam Timetable Generator</h1>\n                <div style={whiteBG}>\n                    <BasicSelect onSessionUpdate={(ses) => {\n                        async function fetchSession(session: string) {\n                            const response = await fetch(`${removeTrailingSlashes(process.env.PUBLIC_URL)}/exams_${session}.json`);\n                            const responseJson = await response.json();\n                            setExamRequestData(responseJson);\n                        }\n\n                        fetchSession(ses).then(() => {\n                            }\n                        );\n                    }\n                    }/>\n                </div>\n\n                <div>\n                    <label>\n\n                        <div style={whiteBG}>\n                            <TextField id=\"filled-basic\" label=\"Your last name\" variant=\"filled\" autoComplete=\"off\"\n                                       onChange={handleNameChange}/>\n\n                        </div>\n                    </label>\n\n                </div>\n\n                <MyTable onDataUpdate={handleDataUpdate}/>\n                {/*<button onClick={() => setCounter(counter + 1)}>Click me</button>*/}\n                {examRequestData ?\n                    (<ExamDecisionWrapper decisionList={decisionInput} lastName={lastName}\n                                          allData={examRequestData}\n                    />) : null\n                }\n                <div className=\"Small-width\">\n                    <p> Enter the course in COURSE and section in SECTION. This updates in real time.\n                    </p>\n                    <p>You must type the FULL course code, including the campus number and section. For example,\n                        CSC108<strong>H1F</strong>.</p>\n                    <p>You only need the section if the course splits exams on sections, which is rare.</p>\n                    <p>If your last name is not in any split, the course will not\n                        show.</p>\n                    <p>Your surname is not case sensitive. DATA MAY BE OUTDATED!</p>\n\n\n                </div>\n\n            </header>\n        </div>\n    );\n}\n\n\ntype OnSelectUpdate = {\n    onSessionUpdate: (ses: string) => void;\n}\n\n\n// the session selector\nfunction BasicSelect(props: OnSelectUpdate) {\n    const [age, setAge] = React.useState('20231');\n\n    const handleChange = (event: SelectChangeEvent) => {\n\n        setAge(event.target.value);\n        props.onSessionUpdate(event.target.value);\n    };\n\n    return (\n        <Box sx={{color: 'white', minWidth: 120}}>\n            <FormControl fullWidth>\n                <InputLabel id=\"demo-simple-select-label\">Session</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={age}\n                    label=\"Age\"\n                    onChange={handleChange}\n                >\n                    <MenuItem value={20231}>Apr 2023</MenuItem>\n                    <MenuItem value={20229}>Dec 2022</MenuItem>\n                </Select>\n            </FormControl>\n        </Box>\n    );\n}\n\n\n// chaos start\n\n\ntype MyTableProps = {\n    onDataUpdate: (data: Decision[]) => void;\n};\n\nfunction MyTable(props: MyTableProps) {\n    const [data, setData] = useState<Decision[]>([{course: '', section: ''}]);\n\n    function handleAddRow() {\n        const newData = [...data, {course: '', section: ''}];\n        setData(newData);\n        props.onDataUpdate(newData);\n    }\n\n    function handleRemoveRow(index: number) {\n        const newData = [...data];\n        newData.splice(index, 1);\n        setData(newData);\n        props.onDataUpdate(newData);\n    }\n\n    function handleChange(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>, index: number, key: keyof Decision) {\n        const newData = [...data];\n        newData[index][key] = event.target.value.toUpperCase();\n        setData(newData);\n        props.onDataUpdate(newData);\n    }\n\n    return (\n        <div>\n            <table>\n                <thead>\n                <tr>\n                    <th>Course</th>\n                    <th>Section</th>\n                    <th>Action</th>\n                </tr>\n                </thead>\n                <tbody>\n                {data.map((row, index) => (\n                    <tr key={index}>\n                        <td>\n                            <div style={whiteBG}>\n                                <TextField id=\"outlined-basic\" label=\"Course code\" variant=\"outlined\"\n                                           type=\"text\"\n                                           value={row.course}\n\n                                           onChange={(event) => handleChange(event, index, 'course')}\n                                />\n                            </div>\n                        </td>\n                        <td>\n                            <div style={whiteBG}>\n                                <TextField id=\"outlined-basic\" label=\"Lecture section\" variant=\"outlined\"\n                                           type=\"text\"\n                                           value={row.section}\n                                           onChange={(event) => handleChange(event, index, 'section')}\n                                /></div>\n                        </td>\n                        <td style={{paddingLeft: \"10px\"}}>\n                            <IconButton aria-label=\"delete\"\n                                        style={{ backgroundColor: 'red', fill: '#000' }}\n\n                                onClick={() => handleRemoveRow(index)}>\n                                <CloseIcon/>\n                            </IconButton>\n\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            <Button variant=\"contained\" onClick={handleAddRow}>Add Row</Button>\n        </div>\n    );\n}\n\nexport default App;\n\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}